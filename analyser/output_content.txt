packagehaxe.ds;classVectorSort{staticpublicfunctionsort<T>(a:Vector<T>,cmp:T->T->Int){rec(a,cmp,0,a.length);}staticfunctionrec<T>(a:Vector<T>,cmp,from,to){varmiddle=(from+to)>>1;if(to-from<12){if(to<=from)return;for(iin(from+1)...to){varj=i;while(j>from){if(compare(a,cmp,j,j-1)<0)swap(a,j-1,j);elsebreak;j--;}}return;}rec(a,cmp,from,middle);rec(a,cmp,middle,to);doMerge(a,cmp,from,middle,to,middle-from,to-middle);}staticfunctiondoMerge<T>(a:Vector<T>,cmp,from,pivot,to,len1,len2){varfirstcut,secondcut,len11,len22,newmid;if(len1==0||len2==0)return;if(len1+len2==2){if(compare(a,cmp,pivot,from)<0)swap(a,pivot,from);return;}if(len1>len2){len11=len1>>1;firstcut=from+len11;secondcut=lower(a,cmp,pivot,to,firstcut);len22=secondcut-pivot;}else{len22=len2>>1;secondcut=pivot+len22;firstcut=upper(a,cmp,from,pivot,secondcut);len11=firstcut-from;}rotate(a,cmp,firstcut,pivot,secondcut);newmid=firstcut+len22;doMerge(a,cmp,from,firstcut,newmid,len11,len22);doMerge(a,cmp,newmid,secondcut,to,len1-len11,len2-len22);}staticfunctionrotate<T>(a:Vector<T>,cmp,from,mid,to){varn;if(from==mid||mid==to)return;n=gcd(to-from,mid-from);while(n--!=0){varval=a[from+n];varshift=mid-from;varp1=from+n,p2=from+n+shift;while(p2!=from+n){a[p1]=a[p2];p1=p2;if(to-p2>shift)p2+=shift;elsep2=from+(shift-(to-p2));}a[p1]=val;}}staticfunctiongcd(m,n){while(n!=0){vart=m%n;m=n;n=t;}returnm;}staticfunctionupper<T>(a:Vector<T>,cmp,from,to,val){varlen=to-from,half,mid;while(len>0){half=len>>1;mid=from+half;if(compare(a,cmp,val,mid)<0)len=half;else{from=mid+1;len=len-half-1;}}returnfrom;}staticfunctionlower<T>(a:Vector<T>,cmp,from,to,val){varlen=to-from,half,mid;while(len>0){half=len>>1;mid=from+half;if(compare(a,cmp,mid,val)<0){from=mid+1;len=len-half-1;}elselen=half;}returnfrom;}staticfunctionswap<T>(a:Vector<T>,i,j){vartmp=a[i];a[i]=a[j];a[j]=tmp;}staticinlinefunctioncompare<T>(a:Vector<T>,cmp,i,j){returncmp(a[i],a[j]);}}