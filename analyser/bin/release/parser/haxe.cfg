{
  "extensions":["hx"],

  "culling":
  [
    {
      "name":"comment_block",
      "expression":"\\/\\*[^*]*\\*+(?:[^*/][^*]*\\*+)*\\/"
    },
    {
      "name":"comment_inline",
      "expression":"\\/\\/.*"
    },
    {
      "name":"string_doublequote",
      "expression":"\"(\"\"|[^\"])*\""
    },
    {
      "name":"string_singlequote",
      "expression":"'(''|[^'])*'"
    }
  ],

  "keywords":
  [
    "abstract",
    "break",
    "case",
    "cast",
    "catch",
    "class",
    "continue",
    "default",
    "do",
    "dynamic",
    "else",
    "enum",
    "extends",
    "extern",
    "false",
    "for",
    "function",
    "if",
    "implements",
    "import",
    "in",
    "inline",
    "interface",
    "macro",
    "new",
    "null",
    "override",
    "package",
    "private",
    "public",
    "return",
    "static",
    "switch",
    "this",
    "throw",
    "true",
    "try",
    "typedef",
    "untyped",
    "using",
    "var",
    "while"
  ],

  "tokens":
  [
    {
      "name":"name",
      "expression":"[a-zA-Z]+[a-zA-Z0-9]*"
    },
    {
      "name":"number",
      "expression":"\\d"
    },

    {
      "name":"dot",
      "expression":"\\."
    },
    {
      "name":"semicolon",
      "expression":";"
    },
    {
      "name":"colon",
      "expression":":"
    },
    {
      "name":"comma",
      "expression":","
    },


    {
      "name":"modulo",
      "expression":"\\%"
    },
    {
      "name":"division",
      "expression":"\\/"
    },
    {
      "name":"multiplication",
      "expression":"\\*"
    },
    {
      "name":"subtraction",
      "expression":"\\-"
    },
    {
      "name":"addition",
      "expression":"\\+"
    },
    {
      "name":"pipe",
      "expression":"\\|"
    },
    {
      "name":"ampersand",
      "expression":"\\&"
    },
    {
      "name":"assignment",
      "expression":"\\="
    },
    {
      "name":"negate",
      "expression":"\\!"
    },
    {
      "name":"complement",
      "expression":"\\~"
    },
    {
      "name":"questionmark",
      "expression":"\\?"
    },


    {
      "name":"bracket_round_open",
      "expression":"\\("
    },
    {
      "name":"bracket_round_close",
      "expression":"\\)"
    },
    {
      "name":"bracket_curly_open",
      "expression":"\\{"
    },
    {
      "name":"bracket_curly_close",
      "expression":"\\}"
    },
    {
      "name":"bracket_square_open",
      "expression":"\\["
    },
    {
      "name":"bracket_square_close",
      "expression":"\\]"
    },
    {
      "name":"bracket_diamond_open",
      "expression":"\\<"
    },
    {
      "name":"bracket_diamond_close",
      "expression":"\\>"
    }

  ],

  "ignore":
  [
    {
      "name":"newline",
      "expression":"\\n|\\r"
    },
    {
      "name":"whitespace",
      "expression":" |\\t"
    }
  ],

  "remove":
  [
    "comment_block","comment_inline"
  ],

  "patterns":
  [
    {
      "name":"file",
      "expressions":[["package_declaration","file_content+"]]
    },
    {
      "name":"file_content",
      "expressions":
      [
        ["import_declaration"],
        ["file_content_type_declarations"]
      ]
    },

    {
       "name":"file_content_type_declarations",
       "expressions":
       [
         ["class_declaration"],
         ["interface_declaration"]
       ]
     },


    {
      "name":"qualifier",
      "expressions":[["public"],["private"],["abstract"],["extern"],["override"],["static"]]
    },
    {
      "name":"chain_name",
      "expressions":[["name","chain_name_list*"]],
      "comment":"some.chain.like.that"
    },

    {
      "name":"type_declaration_usage",
      "expressions":[["chain_name","type_generic_usage?"]],
      "comment":"some.type.like.that<optional.generic>"
    },
    {
      "name":"type_declaration_definition",
      "expressions":[
        ["name","type_assignment"],
        ["name","type_generic_definition?"]
      ],
      "comment":"type:something<other> or type<other>"
    },
    {
      "name":"type_assignment",
      "expressions":[["colon","type_declaration_usage"]],
      "comment":":some.type.like.that<optional.generic>"
    },



    {
      "name":"package_declaration",
      "expressions":[["package","chain_name?","semicolon"]]
    },
    {
      "name":"import_declaration",
      "expressions":[["import","chain_name?","semicolon"]]
    },
    {
      "name":"class_declaration",
      "expressions":[["qualifier*","class","type_declaration_definition"]]
    },
    {
      "name":"interface_declaration",
      "expressions":[["qualifier*","interface","type_declaration_definition"]]
    },



    {
      "name":"type_generic_usage",
      "expressions":[["bracket_diamond_open","type_declaration_usage","type_declaration_list_usage*","bracket_diamond_close"]]
    },
    {
       "name":"type_declaration_list_usage",
       "expressions":[["comma","type_declaration_usage"]]
    },
    {
      "name":"type_generic_definition",
      "expressions":[["bracket_diamond_open","type_declaration_definition","type_declaration_list_definition*","bracket_diamond_close"]]
    },
    {
       "name":"type_declaration_list_definition",
       "expressions":[["comma","type_declaration_definition"]]
    },


    {
      "name":"chain_name_list",
      "expressions":[["dot","name"]]
    }

  ]
}